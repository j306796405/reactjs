{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;AAKA;;;;;;AAEA;;AACA;;;;AAEA;;AACA;;;;;;AAEA,IAAM,WAAW,oBACf,mBAAS,UAAT,EADe,EAEf,iCACE,OAAO,QAAP,CAAgB,IAAhB,CAAqB,KAArB,CACE,8BADF,CADF,CAFe,CAAjB;;;;;;;kBAae;AAAA,SAAgB,yCAA0B,YAA1B,EAAwC,QAAxC,CAAhB;AAAA,C","file":"index-compiled.js","sourcesContent":["/**\n * FileName index.js\n * Date 2016-08-01\n * Created by jianglinj\n */\n'use strict'\n\nimport {createStore, compose} from 'redux';\nimport rootReducers from './../reducers/index';\n\nimport { persistState } from 'redux-devtools';\nimport DevTools from './../tools/DevTools';\n\nconst enhancer = compose(\n  DevTools.instrument(),\n  persistState(\n    window.location.href.match(\n      /[?&]debug_session=([^&#]+)\\b/\n    )\n  )\n);\n\n/**\n * reducer (Function): 接收两个参数，分别是当前的 state 树和要处理的 action，返回新的 state 树。\n * [initialState] (any): 初始时的 state。 在同构应用中，你可以决定是否把服务端传来的 state 水合（hydrate）后传给它，或者从之前保存的用户会话中恢复一个传给它。如果你使用 combineReducers 创建 reducer，它必须是一个普通对象，与传入的 keys 保持同样的结构。否则，你可以自由传入任何 reducer 可理解的内容。\n * */\nexport default initialState => createStore(rootReducers, initialState, enhancer);\n\n"]}