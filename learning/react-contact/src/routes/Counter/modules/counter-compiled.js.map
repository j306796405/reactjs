{"version":3,"sources":["counter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;QAQgB,S,GAAA,S;kBA0CQ,c;;;;;;;AA/CjB,IAAM,gDAAoB,mBAA1B;;;;;AAKA,SAAS,SAAT,GAA+B;AAAA,MAAX,KAAW,yDAAH,CAAG;;AACpC,SAAO;AACL,UAAM,iBADD;AAEL,aAAS;AAFJ,GAAP;AAID;;;;;;;;;;AAUM,IAAM,oCAAc,SAAd,WAAc,GAAM;AAC/B,SAAO,UAAC,QAAD,EAAW,QAAX,EAAwB;AAC7B,WAAO,sBAAY,UAAC,OAAD,EAAa;AAC9B,iBAAW,YAAM;AACf,iBAAS,UAAU,WAAW,OAArB,CAAT;AACA;AACD,OAHD,EAGG,GAHH;AAID,KALM,CAAP;AAMD,GAPD;AAQD,CATM;;AAWA,IAAM,4BAAU;AACrB,sBADqB;AAErB;AAFqB,CAAhB;;;;;AAQP,IAAM,oDACH,iBADG,EACiB,UAAC,KAAD,EAAQ,MAAR;AAAA,SAAmB,QAAQ,OAAO,OAAlC;AAAA,CADjB,CAAN;;;;;AAOA,IAAM,eAAe,CAArB;AACe,SAAS,cAAT,GAAuD;AAAA,MAA9B,KAA8B,yDAAtB,YAAsB;AAAA,MAAR,MAAQ;;AACpE,MAAM,UAAU,gBAAgB,OAAO,IAAvB,CAAhB;;AAEA,SAAO,UAAU,QAAQ,KAAR,EAAe,MAAf,CAAV,GAAmC,KAA1C;AACD","file":"counter-compiled.js","sourcesContent":["// ------------------------------------\r\n// Constants\r\n// ------------------------------------\r\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\r\n\r\n// ------------------------------------\r\n// Actions\r\n// ------------------------------------\r\nexport function increment (value = 1) {\r\n  return {\r\n    type: COUNTER_INCREMENT,\r\n    payload: value\r\n  }\r\n}\r\n\r\n/*  This is a thunk, meaning it is a function that immediately\r\n    returns a function for lazy evaluation. It is incredibly useful for\r\n    creating async actions, especially when combined with redux-thunk!\r\n\r\n    NOTE: This is solely for demonstration purposes. In a real application,\r\n    you'd probably want to dispatch an action of COUNTER_DOUBLE and let the\r\n    reducer take care of this logic.  */\r\n\r\nexport const doubleAsync = () => {\r\n  return (dispatch, getState) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        dispatch(increment(getState().counter))\r\n        resolve()\r\n      }, 200)\r\n    })\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  increment,\r\n  doubleAsync\r\n}\r\n\r\n// ------------------------------------\r\n// Action Handlers\r\n// ------------------------------------\r\nconst ACTION_HANDLERS = {\r\n  [COUNTER_INCREMENT]: (state, action) => state + action.payload\r\n}\r\n\r\n// ------------------------------------\r\n// Reducer\r\n// ------------------------------------\r\nconst initialState = 0\r\nexport default function counterReducer (state = initialState, action) {\r\n  const handler = ACTION_HANDLERS[action.type]\r\n\r\n  return handler ? handler(state, action) : state\r\n}\r\n"]}