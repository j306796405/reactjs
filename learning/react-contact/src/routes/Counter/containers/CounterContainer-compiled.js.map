{"version":3,"sources":["CounterContainer.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;AAOA;;;;;;;;;;AAMA,IAAM,qBAAqB;AACzB,eAAW;AAAA,eAAM,wBAAU,CAAV,CAAN;AAAA,KADc;AAEzB;AAFyB,CAA3B;;;;;;;AAKA,IAAM,kBAAkB,SAAlB,eAAkB,CAAC,KAAD;AAAA,WAAY;AAClC,iBAAS,MAAM;AADmB,KAAZ;AAAA,CAAxB;;;;;;;;;;;;;;;;kBAkBe,yBAAQ,eAAR,EAAyB,kBAAzB,oB","file":"CounterContainer-compiled.js","sourcesContent":["import { connect } from 'react-redux'\r\nimport { increment, doubleAsync } from '../modules/counter'\r\n\r\n/*  This is a container component. Notice it does not contain any JSX,\r\n    nor does it import React. This component is **only** responsible for\r\n    wiring in the actions and state necessary to render a presentational\r\n    component - in this case, the counter:   */\r\n\r\nimport Counter from 'components/Counter'\r\n\r\n/*  Object of action creators (can also be function that returns object).\r\n    Keys will be passed as props to presentational components. Here we are\r\n    implementing our wrapper around increment; the component doesn't care   */\r\n\r\nconst mapDispatchToProps = {\r\n  increment: () => increment(1),\r\n  doubleAsync\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  counter: state.counter\r\n})\r\n\r\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\r\n\r\n    import { createSelector } from 'reselect'\r\n    const counter = (state) => state.counter\r\n    const tripleCount = createSelector(counter, (count) => count * 3)\r\n    const mapStateToProps = (state) => ({\r\n      counter: tripleCount(state)\r\n    })\r\n\r\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\r\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\r\n    Selectors are composable. They can be used as input to other selectors.\r\n    https://github.com/reactjs/reselect    */\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\r\n"]}